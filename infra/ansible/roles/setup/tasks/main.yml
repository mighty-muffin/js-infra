---
### Hardware | Install packages
- name: Hardware | RPi4 Config
  when:
    - "'raspi' in ansible_kernel"
  block:
    - name: Copy utility scripts
      ansible.builtin.copy:
        src: scripts/{{ item }}
        dest: /usr/local/bin/{{ item }}
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
      with_items:
        - pi_temp
        - pi_throttling
    - name: Set GPU memory split to 16 MB
      ansible.builtin.lineinfile:
        path: /boot/firmware/config.txt
        line: gpu_mem=16
        create: true
        mode: "0755"
      notify: reboot
- name: Hostname | Ubuntu
  when:
    - ansible_facts['distribution'] == 'Ubuntu'
  block:
    - name: Networking | Set hostname to inventory hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname | default('ubuntu') }}"
      when:
        - ansible_hostname != inventory_hostname

### Network | Configure network interfaces
- name: Networking | Ubuntu
  when:
    - ansible_facts['distribution'] == 'Ubuntu'
  block:
    - name: Networking | Update /etc/hosts to include inventory hostname
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          127.0.0.1   localhost
          127.0.1.1   {{ inventory_hostname | default('ubuntu') }}


### Update | System update and upgrade
- name: Packages | Debian Family
  block:
    - name: Packages | Update
      ansible.builtin.apt:
        autoclean: true
        autoremove: true
        cache_valid_time: 3600
        update_cache: true
        upgrade: dist
    - name: Packages | Kernel Update
      ansible.builtin.apt:
        upgrade: full
    - name: Packages | Remove leaf packages
      ansible.builtin.apt:
        autoremove: true
        autoclean: true
  rescue:
    - name: APT Cache | Message
      ansible.builtin.debug:
        msg: There was an error during the update cycle.
  always:
    - name: Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required
    - name: Reboot system if required
      ansible.builtin.reboot:
        msg: Rebooting to complete system upgrade
        reboot_timeout: 120
      when: reboot_required.stat.exists

### Unattended | Unattended Upgrades
- name: Unattended-Upgrades | Install package
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    autoclean: true
  loop:
    - unattended-upgrades
- name: Unattended-Upgrades | 2norecommends
  ansible.builtin.blockinfile:
    path: /etc/apt/apt.conf.d/2norecommends
    mode: "0644"
    create: true
    block: |
      APT::Get::Install-Recommends "false";
      APT::Get::Install-Suggests "false";
      APT::Install-Recommends "false";
      APT::Install-Suggests "false";
  notify: Restart unattended-upgrades
- name: Unattended-Upgrades | 10periodic
  ansible.builtin.blockinfile:
    path: /etc/apt/apt.conf.d/10periodic
    mode: "0644"
    create: true
    block: |
      APT::Periodic::AutocleanInterval "7";
      APT::Periodic::Download-Upgradeable-Packages "1";
      APT::Periodic::Unattended-Upgrade "1";
      APT::Periodic::Update-Package-Lists "1";
  notify: Restart unattended-upgrades
- name: Unattended-Upgrades | 50unattended-upgrades
  ansible.builtin.blockinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    mode: "0644"
    create: true
    block: |
      Unattended-Upgrade::Allowed-Origins {
          "${distro_id}:${distro_codename}-security";
          "${distro_id}:${distro_codename}-updates";
          "${distro_id}:${distro_codename}";
          "${distro_id}ESM:${distro_codename}-infra-security";
          "${distro_id}ESMApps:${distro_codename}-apps-security";
      };
      Unattended-Upgrade::AutoFixInterruptedDpkg "true";
      Unattended-Upgrade::Automatic-Reboot "true";
      Unattended-Upgrade::Automatic-Reboot-Time "03:00";
      Unattended-Upgrade::Remove-New-Unused-Dependencies "true";
      Unattended-Upgrade::Remove-Unused-Dependencies "true";
      Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
  notify: Restart unattended-upgrades

### Packages | Setup common packages
- name: Packages | Install common packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - curl
    - git
    - htop
    - nano
    - nfs-common
    - openssh-server
    - sudo
- name: Packages | Install qemu-guest-agent
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  loop:
    - qemu-guest-agent
  when:
    - ansible_virtualization_role == "guest"
  notify: Start qemu
- name: Packages | Install RPi packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    autoclean: true
  loop:
    - linux-modules-extra-raspi
    - rpi-eeprom
  when:
    - "'raspi' in ansible_kernel"
  notify: Reboot
- name: Cloud-Init | Disable
  block:
    - name: Cloud-Init | Check for Cloud-Init folder
      ansible.builtin.stat:
        path: /etc/cloud/
      register: etc_cloud_folder
    - name: Cloud-Init | Disable /etc/cloud/cloud-init.disabled
      ansible.builtin.copy:
        dest: /etc/cloud/cloud-init.disabled
        content: disabled by ansible\n
        owner: root
        group: root
        mode: "0644"
      when:
        - etc_cloud_folder.stat.exists
    - name: Cloud-Init | Remove package
      ansible.builtin.apt:
        name: "{{ item }}"
        state: absent
      loop:
        - cloud-init
      when:
        - etc_cloud_folder.stat.exists
    - name: Cloud-Init | Disable all services
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
      loop:
        - cloud-config.service
        - cloud-final.service
        - cloud-init-local.service
        - cloud-init.service
      when:
        - etc_cloud_folder.stat.exists
  rescue:
    - name: Cloud-Init | Something wrong
      ansible.builtin.debug:
        msg: Playbook had an issue with Cloud-Init disabling.

### UFW | Install and configure UFW
- name: Firewall | Ubuntu
  when:
    - ansible_os_family == "Debian"
  block:
    - name: Firewall | Install UFW packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - ufw
    - name: Firewall | Set logging
      community.general.ufw:
        logging: "on"
      notify: Reload ufw
    - name: Firewall | Disable UFW service
      ansible.builtin.service:
        name: ufw
        state: started

### SSH | Install and configure SSH
- name: SSH | Start SSH service
  ansible.builtin.service:
    name: ssh
    state: started
- name: SSH | Update SSH configuration
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: sshd -T -f %s
    mode: "0644"
  with_items:
    - regexp: ^PasswordAuthentication
      line: PasswordAuthentication yes
    - regexp: ^PermitRootLogin
      line: PermitRootLogin yes
    - regexp: ^Port
      line: Port 22
    - regexp: ^UseDNS
      line: UseDNS no
    - regexp: ^PermitEmptyPasswords
      line: PermitEmptyPasswords no
    - regexp: ^ChallengeResponseAuthentication
      line: ChallengeResponseAuthentication no
    - regexp: ^GSSAPIAuthentication
      line: GSSAPIAuthentication no
    - regexp: ^X11Forwarding
      line: X11Forwarding no
  notify: Restart ssh
- name: Open SSH ports
  community.general.ufw:
    state: "{{ item.state }}"
    rule: "{{ item.rule }}"
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  with_items:
    - name: SSH
      state: enabled
      rule: allow
      port: "22"
      proto: tcp
  notify: Reload ufw
- name: Fail2Ban | Install package
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    autoclean: true
  loop:
    - fail2ban
- name: Fail2Ban | jail.local
  ansible.builtin.blockinfile:
    path: /etc/fail2ban/jail.local
    mode: "0644"
    create: true
    block: |
      [sshd]
      enabled = true
      port    = 22
      maxretry = 5
      findtime  = 60m
      bantime  = 1w
      filter  = sshd
      ignoreip = 127.0.0.1/8
  notify: Restart fail2ban

### User | Create user
- name: User | Ensure groups are present
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
  loop:
    - sudo
- name: User | Ensure sudo group has sudo privileges
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: ^%sudo
    line: "%sudo ALL=(ALL:ALL) ALL"
    validate: /usr/sbin/visudo -cf %s
- name: User | Give sudo access to {{ ansible_user }}
  ansible.builtin.blockinfile:
    path: /etc/sudoers
    insertafter: "%sudo ALL=(ALL:ALL) ALL"
    block: | # pragma: allowlist secret
      # Gives sudo access to the devops group
      {{ ansible_user }}        ALL=(ALL)       NOPASSWD: ALL


### Swap | Configure swap
- name: Filesystem | swap | disable at runtime
  ansible.builtin.command: |
    swapoff -a
  when: ansible_swaptotal_mb > 0
  register: swap_changed
  changed_when: swap_changed.rc != 0
- name: Filesystem | swap| disable on boot
  ansible.posix.mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  loop:
    - swap
    - none

### Watchdog | Install packages
- name: Watchdog | RPi4 Config
  when:
    - "'raspi' in ansible_kernel"
  block:
    - name: Watchdog | RPi4 Config
      ansible.builtin.debug:
        msg: sudo nano /boot/firmware/config.txt
    - name: Watchdog | RPi4 Config
      ansible.builtin.debug:
        msg: dtparam=watchdog=on
- name: Watchdog | Debian Family
  when:
    - ansible_os_family == "Debian"
  block:
    - name: Watchdog | Install required packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - watchdog
    - name: Watchdog | Enable watchdog module
      ansible.builtin.lineinfile:
        dest: /etc/default/watchdog
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        mode: "0644"
      with_items:
        - regexp: ^watchdog_module=
          line: watchdog_module="i6300esb"
      when:
        - ansible_virtualization_role == "guest"
    - name: Deploy | Watchdog configuration
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: /etc/{{ item }}
        owner: root
        group: root
        mode: "0644"
      loop:
        - watchdog.conf
      notify: Start watchdog
